Testbed:
 * Characterization of trajectory Measures
   * Compute bias? (distance from ground truth to cost minimum)
   * Perturb trajectory small amounts around ground truth and evaluate costs
     * Include tests with ta=tb
     * Granularity (dilution of precision, distance until cost increases at all)
     * Monotonicity (distance until cost begins to decrease)
     * Cost (maybe smoothed around ground truth)
     * Jacobian (sensitivity)
     * Hessian (eigenvalues and consistency of their ratios, eigenvectors)
 * Unit tests for all framework classes
   * Call all constructors, copy constructors, and destructors
   * Call all interface functions
   * Check exception handling

Demonstration:
 * Demonstrate variable computation concept

DataContainer:
 * Get indoor navigation data from Jimmy Touma or use RAWSEEDS
 * Integration with AFRL ANTBED
   * Stateless API
   * Provide configuration tool with graphical data preview
   * Ask about netcdf format

Measure:
 * New visual measure that is novel, efficient, complete, and independent of third party libraries
   * SURF feature tracks to be compared to trajectories?

Optimizer:
 * New optimizer that is novel, efficient, complete, and independent of third party libraries
   * Linkage-based GA crossover function?
   * Adaptation of Pose Graph method?

Publication:
 * Present latest material on the whole framework
 * Offer examples of each object type
 * Measurement graphs are an alternative to pose graphs
 * Re-interpretation of old data through re-evaluation of Measures
 * Partial or scale-dependent computation
 * Disseminate to people listed in the correspondence directory

Documentation:
 * Complete minimal set of dOxygen comments
 * Provide textual descriptions of use cases on the Wiki
   * TOMMAS is a Reference Implementation (RI)
   * Describe the distinction between testbed and Optimizer
 * Visual Measures must take into account the camera offset and projection function
 * Code must compile and run on both Windows and Linux unless the user's environment is not capable
 * Write class level comments for all classes
 * Incorporate Google C++ Style Guidelines throughout the code
 * Update "download components" links, point to another wiki page that links to downloads and UCF code
 * Unify notation through paper, wiki, ppt, and code involving node indices and block indices (j or n)
 * Assert is not allowed in C++, use exceptions instead
 * The measurement cost functional evaluates trajectories over an interval defined by two points
 * Image masking is incorporated into the camera projection, most easily queried by its inverse
 * Add a glossary page
 * Describe how to perform trade studies
   * loose, tight, and ultra-tight modes
   * computation limitations
   * GPS quality
   * IMU quality
   * camera FOV
   * camera FPS
   * image resolution
