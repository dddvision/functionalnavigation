fid=fopen('sbaProjection.c','w');

% Include the conventional libraries and the function to extract K
clear str;

str{1} = ['#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n\n'...
'/* C code for the projection and Jacobian functions \n'...
' * to be loaded from a shared library by SBA MEX interface\n'...
' */\n\n'...
'/* Compilation instructions:\n'...
' *\n'...
' * Un*x/GCC:    gcc -fPIC -O3 -shared -o sbaProjection.so sbaProjection.c\n'...
' * Win32/MSVC:  cl /nologo /O2 projac.c /link /dll \n'...
  '/out:projac.dll\n'...
' */\n\n'...
'#if defined(_MSC_VER) /* DLL directives for MSVC */\n'...
'#define API_MOD    __declspec(dllexport)\n'...
'#define CALL_CONV  __cdecl\n'...
'#else /* define empty */\n'...
'#define API_MOD \n'...
'#define CALL_CONV\n'...
'#endif /* _MSC_VER */\n\n' ];

% str{2} = ['getK( double **adata, int jFrame, double *aj, double *k ) {\n\n' ...
%  'int isProj = (int) *(adata[0]);\n' ...
%  'int i, j = 6 + (isProj!=0);\n' ...
%  'int nElemK = 3 + 2*(isProj!=0);\n'...
%  'double *kMask = adata[1];\n'...
% 'double *kIn = adata[2];\n\n'...
% '    for( i = 0; i < nElemK; i++ )\n'...
% '        if ( kMask[i] )\n'...
% '            k[i] = *(kIn + i + nElemK*jFrame);\n'...
% '        else\n'...
% '            k[i] = aj[j++];\n}\n\n' ];

for i=1:length(str)
  fprintf(fid,str{i});
end


syms x y z k1 k2 k3 k4 k5 q1 q2 q3 q4 tr1 tr2 tr3 kap1 kap2 p1 p2 real
syms h1 h2 h3 h4 h5 h6 h7 h8 real

% Write the routines to the file
% orthographic, uncalibrated
1
makeSBASlave( fid, 1, 0, 0, 0 );
% orthographic, calibrated
2
makeSBASlave( fid, 1, 0, 1, 0 );
% projective, uncalibrated
3
makeSBASlave( fid, 1, 1, 0, 0 );
% projective, calibrated
4
makeSBASlave( fid, 1, 1, 1, 0 );
% orthographic, full
5
makeSBASlave( fid, 0, 0, 0, 0 );
% projective, full
6
makeSBASlave( fid, 0, 1, 0, 0 );
% homography
%  makeSBASlave( fid, 2, 1, 0, 0 );

fclose(fid);

system('gcc -fPIC -O3 -shared -o sbaProjection.so sbaProjection.c');
