#summary This document explains how to create several types of framework components or plug-ins.
#labels Featured,Phase-Implementation

=== Introduction ===

This project provides a framework for testing navigation algorithms.  Do you want to create a component that will seamlessly integrate with this framework?  If so, then you have come to the right place.  Otherwise, maybe you want to [http://code.google.com/p/functionalnavigation/downloads/list download components] created by others.

There are an infinite number of ways to represent system dynamics, trajectory measures, and optimization methods.  Therefore, we intend to define clear interfaces and leave issues of information representation to the implementations of individual components.

=== Interface Control Documents (ICDs) ===

Specific guidelines for each component:
  * [InterfaceDynamicModels Interface for Dynamic Models]
  * [InterfaceTrajectoryMeasures Interface for Trajectory Measures]
  * [InterfaceOptimizationMethods Interface for Optimization Methods]

General coding guidelines for this project:
  * RULE: Only upload plain text, C++, or Matlab files (makefile, .c, .cpp, .h, .m, .txt)
  * RULE: Do not upload binaries (.jpg, .png, .dll, .lib, .mexglx, .mexw32, .vc, .icc., pl, .w32)
  * RULE: Packages should not assume that they are in the components directory.
  * RULE: Component configuration files have the same name as the component with “Config” appended.
  * RULE: Framework interface bugs should be submitted to the Google Code issue tracker.
  * RULE: Bugs in components should be noted using TODO statements within code or in a TODO.txt file that accompanies the component.
  * RULE: Use two spaces for each indentation level.
  * RULE: At least one blank line should separate functions in files that define multiple functions.
  * RULE: Don't put an empty comment on a line by itself unless it separates other comments.
  * RULE: Use no more than 120 characters per line.
  * RULE: Place constants in configuration files or headers whenever possible.
  * RULE: Avoid using global variables.
  * RULE (C++): Code must compile using "g++ -Wall -Werror -ansi –pedantic”
  * RULE (C++): Manage memory through self-contained structures or objects that keep track of their own allocation sizes.
  * RULE (Matlab): Components must pass the Matlab "mlint" test or contain a comment at each line explaining why not.
  * RULE (Matlab): Use fprintf() instead of disp() or warning().
  * RULE: Name variables beginning with a lower-case letter, and capitalize the first letter of concatenated words.
{{{
myVariable
isPrime
computeSVD
}}}
  * RULE: No space between function identifier and the opening parenthesis.
{{{
myFunction(void);
if( a==b )
}}}
  * RULE: Use whitespace consistently.
{{{
this =  is +bad;
}}}
  * RULE: Place a description above each function that identifies INPUT, OUTPUT, RETURN VALUE, and NOTES when applicable.
{{{
// Description of C++ function
//
// INPUT
// a = awesome number
// b = basic number
//
// OUTPUT
// c = cool number
//
// RETURN VALUE
// Meaning of life
//
// NOTES
// Here is extra information
}}}
{{{
% Description of Matlab function
%
% INPUT
% a = awesome number
% b = basic number
%
% OUTPUT
% c = cool number
%
% NOTES
% Here is extra information
}}}
  * RULE (C++): Use long descriptive variable names or very short ones coupled with detailed descriptions.
{{{
int triangleVertices = 3;
int a; // index of the first vertex
int b; // second vertex
int c; // third vertex
}}}
  * RULE (C++): Functions without meaningful return value should be declared void and explicitly return.
{{{
void function(int a, int b, int *c)
{
  *c=a+b;
  return;
}
}}}
  * RULE (C++): Prefer one variable declaration per line.
{{{
int i;
int j;
int k;
}}}
  * RULE (C++): Whenever possible, initialize variables on the same line as their declaration.
{{{
int a = 0;
double **matrix = NULL;
double point[DIM] = {0,0};
}}}
  * RULE (C++): Pointer stars should be grouped with variables.
{{{
int *abc;
double **xyz;
}}}
  * RULE (C++): Don't include variable names in function prototypes.
{{{
function1(int*,obj*,double,int);
function2(int,int,int,int,int);
}}}
  * RULE (C++): Scope brackets should align on equal indentation levels.
{{{
if(a)
{
  for( i=0 ; i<max ; i++ )
  {
    b=c;
  }
}
}}}

External references for good coding practices and tips:
  * [http://www.datatool.com/downloads/matlab_style_guidelines.pdf Matlab style guidelines].
  * [http://www-personal.acfr.usyd.edu.au/tbailey/seminars/design.pdf C++ design guidelines].

Information on how to wrap code written in different languages:
  * [http://docs.python.org/extending/extending.html How to call C++ from Python]
  * [http://docs.python.org/extending/embedding.html How to call Python from C++]
  * [http://www.mathworks.com/support/tech-notes/1600/1605.html How to call C++ from Matlab]

=== Class Diagram ===

<img src="http://functionalnavigation.googlecode.com/svn/wiki/classDiagram.png">

=== Class Diagram Notation (from Design Patterns) ===

<img src="http://functionalnavigation.googlecode.com/svn/wiki/classDiagramNotation.png">